// Code generated by "goki generate ./..."; DO NOT EDIT.

package ecmd

import (
	"goki.dev/gti"
	"goki.dev/ordmap"
)

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/emergent/v2/ecmd.Args",
	ShortName:  "ecmd.Args",
	IDName:     "args",
	Doc:        "Args provides maps for storing commandline args.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Ints", &gti.Field{Name: "Ints", Type: "map[string]*github.com/emer/emergent/v2/ecmd.Int", LocalType: "map[string]*Int", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"Bools", &gti.Field{Name: "Bools", Type: "map[string]*github.com/emer/emergent/v2/ecmd.Bool", LocalType: "map[string]*Bool", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"Strings", &gti.Field{Name: "Strings", Type: "map[string]*github.com/emer/emergent/v2/ecmd.String", LocalType: "map[string]*String", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"Floats", &gti.Field{Name: "Floats", Type: "map[string]*github.com/emer/emergent/v2/ecmd.Float", LocalType: "map[string]*Float", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"Flagged", &gti.Field{Name: "Flagged", Type: "bool", LocalType: "bool", Doc: "true when all args have been set to flag package", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/emergent/v2/ecmd.Int",
	ShortName:  "ecmd.Int",
	IDName:     "int",
	Doc:        "Int represents a int valued arg",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Name", &gti.Field{Name: "Name", Type: "string", LocalType: "string", Doc: "name of arg -- must be unique", Directives: gti.Directives{}, Tag: ""}},
		{"Desc", &gti.Field{Name: "Desc", Type: "string", LocalType: "string", Doc: "description of arg", Directives: gti.Directives{}, Tag: ""}},
		{"Val", &gti.Field{Name: "Val", Type: "int", LocalType: "int", Doc: "value as parsed", Directives: gti.Directives{}, Tag: ""}},
		{"Def", &gti.Field{Name: "Def", Type: "int", LocalType: "int", Doc: "default initial value", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/emergent/v2/ecmd.Bool",
	ShortName:  "ecmd.Bool",
	IDName:     "bool",
	Doc:        "Bool represents a bool valued arg",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Name", &gti.Field{Name: "Name", Type: "string", LocalType: "string", Doc: "name of arg -- must be unique", Directives: gti.Directives{}, Tag: ""}},
		{"Desc", &gti.Field{Name: "Desc", Type: "string", LocalType: "string", Doc: "description of arg", Directives: gti.Directives{}, Tag: ""}},
		{"Val", &gti.Field{Name: "Val", Type: "bool", LocalType: "bool", Doc: "value as parsed", Directives: gti.Directives{}, Tag: ""}},
		{"Def", &gti.Field{Name: "Def", Type: "bool", LocalType: "bool", Doc: "default initial value", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/emergent/v2/ecmd.String",
	ShortName:  "ecmd.String",
	IDName:     "string",
	Doc:        "String represents a string valued arg",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Name", &gti.Field{Name: "Name", Type: "string", LocalType: "string", Doc: "name of arg -- must be unique", Directives: gti.Directives{}, Tag: ""}},
		{"Desc", &gti.Field{Name: "Desc", Type: "string", LocalType: "string", Doc: "description of arg", Directives: gti.Directives{}, Tag: ""}},
		{"Val", &gti.Field{Name: "Val", Type: "string", LocalType: "string", Doc: "value as parsed", Directives: gti.Directives{}, Tag: ""}},
		{"Def", &gti.Field{Name: "Def", Type: "string", LocalType: "string", Doc: "default initial value", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/emergent/v2/ecmd.Float",
	ShortName:  "ecmd.Float",
	IDName:     "float",
	Doc:        "Float represents a float64 valued arg",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Name", &gti.Field{Name: "Name", Type: "string", LocalType: "string", Doc: "name of arg -- must be unique", Directives: gti.Directives{}, Tag: ""}},
		{"Desc", &gti.Field{Name: "Desc", Type: "string", LocalType: "string", Doc: "description of arg", Directives: gti.Directives{}, Tag: ""}},
		{"Val", &gti.Field{Name: "Val", Type: "float64", LocalType: "float64", Doc: "value as parsed", Directives: gti.Directives{}, Tag: ""}},
		{"Def", &gti.Field{Name: "Def", Type: "float64", LocalType: "float64", Doc: "default initial value", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

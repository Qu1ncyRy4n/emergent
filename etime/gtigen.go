// Code generated by "goki generate ./..."; DO NOT EDIT.

package etime

import (
	"goki.dev/gti"
	"goki.dev/ordmap"
)

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/emergent/v2/etime.Modes",
	ShortName: "etime.Modes",
	IDName:    "modes",
	Doc:       "Modes are evaluation modes (Training, Testing, etc)",
	Directives: gti.Directives{
		&gti.Directive{Tool: "go", Directive: "generate", Args: []string{"goki", "generate"}},
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"etime"}},
		&gti.Directive{Tool: "enums", Directive: "enum", Args: []string{}},
	},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/emergent/v2/etime.ScopeKey",
	ShortName:  "etime.ScopeKey",
	IDName:     "scope-key",
	Doc:        "ScopeKey the associated string representation of a scope or scopes.\nThey include one or more Modes and one or more Times.\nIt is fully extensible with arbitrary mode and time strings --\nthe enums are a convenience for standard cases.\nUltimately a single mode, time pair is used concretely, but the\nAll* cases and lists of multiple can be used as a convenience\nto specify ranges",
	Directives: gti.Directives{},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/emergent/v2/etime.Times",
	ShortName: "etime.Times",
	IDName:    "times",
	Doc:       "Times the enum",
	Directives: gti.Directives{
		&gti.Directive{Tool: "go", Directive: "generate", Args: []string{"goki", "generate", "-add-types"}},
		&gti.Directive{Tool: "enums", Directive: "enum", Args: []string{}},
	},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

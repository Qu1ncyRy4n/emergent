// Code generated by "stringer -type=Times"; DO NOT EDIT.

package etime

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NoTime-0]
	_ = x[AllTimes-1]
	_ = x[Cycle-2]
	_ = x[FastSpike-3]
	_ = x[GammaCycle-4]
	_ = x[Phase-5]
	_ = x[BetaCycle-6]
	_ = x[AlphaCycle-7]
	_ = x[ThetaCycle-8]
	_ = x[Event-9]
	_ = x[Trial-10]
	_ = x[Tick-11]
	_ = x[Sequence-12]
	_ = x[Epoch-13]
	_ = x[Block-14]
	_ = x[Condition-15]
	_ = x[Run-16]
	_ = x[Expt-17]
	_ = x[Scene-18]
	_ = x[Episode-19]
	_ = x[TimesN-20]
}

const _Times_name = "NoTimeAllTimesCycleFastSpikeGammaCyclePhaseBetaCycleAlphaCycleThetaCycleEventTrialTickSequenceEpochBlockConditionRunExptSceneEpisodeTimesN"

var _Times_index = [...]uint8{0, 6, 14, 19, 28, 38, 43, 52, 62, 72, 77, 82, 86, 94, 99, 104, 113, 116, 120, 125, 132, 138}

func (i Times) String() string {
	if i < 0 || i >= Times(len(_Times_index)-1) {
		return "Times(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Times_name[_Times_index[i]:_Times_index[i+1]]
}

func (i *Times) FromString(s string) error {
	for j := 0; j < len(_Times_index)-1; j++ {
		if s == _Times_name[_Times_index[j]:_Times_index[j+1]] {
			*i = Times(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: Times")
}

var _Times_descMap = map[Times]string{
	0:  `NoTime represents a non-initialized value, or a null result`,
	1:  `AllTimes indicates that the log should occur over all times present in other items.`,
	2:  `Cycle is the finest time scale -- typically 1 msec -- a single activation update.`,
	3:  `FastSpike is typically 10 cycles = 10 msec (100hz) = the fastest spiking time generally observed in the brain. This can be useful for visualizing updates at a granularity in between Cycle and GammaCycle.`,
	4:  `GammaCycle is typically 25 cycles = 25 msec (40hz)`,
	5:  `Phase is typically a Minus or Plus phase, where plus phase is bursting / outcome that drives positive learning relative to prediction in minus phase. It can also be used for other time scales involving multiple Cycles.`,
	6:  `BetaCycle is typically 50 cycles = 50 msec (20 hz) = one beta-frequency cycle. Gating in the basal ganglia and associated updating in prefrontal cortex occurs at this frequency.`,
	7:  `AlphaCycle is typically 100 cycles = 100 msec (10 hz) = one alpha-frequency cycle.`,
	8:  `ThetaCycle is typically 200 cycles = 200 msec (5 hz) = two alpha-frequency cycles. This is the modal duration of a saccade, the update frequency of medial temporal lobe episodic memory, and the minimal predictive learning cycle (perceive an Alpha 1, predict on 2).`,
	9:  `Event is the smallest unit of naturalistic experience that coheres unto itself (e.g., something that could be described in a sentence). Typically this is on the time scale of a few seconds: e.g., reaching for something, catching a ball.`,
	10: `Trial is one unit of behavior in an experiment -- it is typically environmentally defined instead of endogenously defined in terms of basic brain rhythms. In the minimal case it could be one ThetaCycle, but could be multiple, and could encompass multiple Events (e.g., one event is fixation, next is stimulus, last is response)`,
	11: `Tick is one step in a sequence -- often it is useful to have Trial count up throughout the entire Epoch but also include a Tick to count trials within a Sequence`,
	12: `Sequence is a sequential group of Trials (not always needed).`,
	13: `Epoch is used in two different contexts. In machine learning, it represents a collection of Trials, Sequences or Events that constitute a &#34;representative sample&#34; of the environment. In the simplest case, it is the entire collection of Trials used for training. In electrophysiology, it is a timing window used for organizing the analysis of electrode data.`,
	14: `Block is a collection of Trials, Sequences or Events, often used in experiments when conditions are varied across blocks.`,
	15: `Condition is a collection of Blocks that share the same set of parameters. This is intermediate between Block and Run levels. Aggregation of stats at this level is based on the last 5 rows by default.`,
	16: `Run is a complete run of a model / subject, from training to testing, etc. Often multiple runs are done in an Expt to obtain statistics over initial random weights etc. Aggregation of stats at this level is based on the last 5 rows by default.`,
	17: `Expt is an entire experiment -- multiple Runs through a given protocol / set of parameters.`,
	18: `Scene is a sequence of events that constitutes the next larger-scale coherent unit of naturalistic experience corresponding e.g., to a scene in a movie. Typically consists of events that all take place in one location over e.g., a minute or so. This could be a paragraph or a page or so in a book.`,
	19: `Episode is a sequence of scenes that constitutes the next larger-scale unit of naturalistic experience e.g., going to the grocery store or eating at a restaurant, attending a wedding or other &#34;event&#34;. This could be a chapter in a book.`,
	20: ``,
}

func (i Times) Desc() string {
	if str, ok := _Times_descMap[i]; ok {
		return str
	}
	return "Times(" + strconv.FormatInt(int64(i), 10) + ")"
}

// Code generated by "goki generate ./..."; DO NOT EDIT.

package popcode

import (
	"goki.dev/gti"
	"goki.dev/ordmap"
)

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/emergent/v2/popcode.PopCodes",
	ShortName:  "popcode.PopCodes",
	IDName:     "pop-codes",
	Doc:        "",
	Directives: gti.Directives{},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/emergent/v2/popcode.OneD",
	ShortName:  "popcode.OneD",
	IDName:     "one-d",
	Doc:        "popcode.OneD provides encoding and decoding of population\ncodes, used to represent a single continuous (scalar) value\nacross a population of units / neurons (1 dimensional)",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Code", &gti.Field{Name: "Code", Type: "github.com/emer/emergent/v2/popcode.PopCodes", LocalType: "PopCodes", Doc: "how to encode the value", Directives: gti.Directives{}, Tag: ""}},
		{"Min", &gti.Field{Name: "Min", Type: "float32", LocalType: "float32", Doc: "minimum value representable -- for GaussBump, typically include extra to allow mean with activity on either side to represent the lowest value you want to encode", Directives: gti.Directives{}, Tag: ""}},
		{"Max", &gti.Field{Name: "Max", Type: "float32", LocalType: "float32", Doc: "maximum value representable -- for GaussBump, typically include extra to allow mean with activity on either side to represent the lowest value you want to encode", Directives: gti.Directives{}, Tag: ""}},
		{"Sigma", &gti.Field{Name: "Sigma", Type: "float32", LocalType: "float32", Doc: "sigma parameter of a gaussian specifying the tuning width of the coarse-coded units, in normalized 0-1 range", Directives: gti.Directives{}, Tag: "def:\"0.2\" viewif:\"Code=GaussBump\""}},
		{"Clip", &gti.Field{Name: "Clip", Type: "bool", LocalType: "bool", Doc: "ensure that encoded and decoded value remains within specified range", Directives: gti.Directives{}, Tag: ""}},
		{"Thr", &gti.Field{Name: "Thr", Type: "float32", LocalType: "float32", Doc: "for decoding, threshold to cut off small activation contributions to overall average value (i.e., if unit's activation is below this threshold, it doesn't contribute to weighted average computation)", Directives: gti.Directives{}, Tag: "def:\"0.1\""}},
		{"MinSum", &gti.Field{Name: "MinSum", Type: "float32", LocalType: "float32", Doc: "minimum total activity of all the units representing a value: when computing weighted average value, this is used as a minimum for the sum that you divide by", Directives: gti.Directives{}, Tag: "def:\"0.2\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/emergent/v2/popcode.navg",
	ShortName:  "popcode.navg",
	IDName:     "navg",
	Doc:        "",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"avg", &gti.Field{Name: "avg", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"idx", &gti.Field{Name: "idx", Type: "int", LocalType: "int", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/emergent/v2/popcode.TwoD",
	ShortName:  "popcode.TwoD",
	IDName:     "two-d",
	Doc:        "popcode.TwoD provides encoding and decoding of population\ncodes, used to represent two continuous (scalar) values\nacross a 2D tensor, using row-major XY encoding:\nY = outer, first dim, X = inner, second dim",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Code", &gti.Field{Name: "Code", Type: "github.com/emer/emergent/v2/popcode.PopCodes", LocalType: "PopCodes", Doc: "how to encode the value", Directives: gti.Directives{}, Tag: ""}},
		{"Min", &gti.Field{Name: "Min", Type: "goki.dev/mat32/v2.Vec2", LocalType: "mat32.Vec2", Doc: "minimum value representable on each dim -- for GaussBump, typically include extra to allow mean with activity on either side to represent the lowest value you want to encode", Directives: gti.Directives{}, Tag: ""}},
		{"Max", &gti.Field{Name: "Max", Type: "goki.dev/mat32/v2.Vec2", LocalType: "mat32.Vec2", Doc: "maximum value representable on each dim -- for GaussBump, typically include extra to allow mean with activity on either side to represent the lowest value you want to encode", Directives: gti.Directives{}, Tag: ""}},
		{"Sigma", &gti.Field{Name: "Sigma", Type: "goki.dev/mat32/v2.Vec2", LocalType: "mat32.Vec2", Doc: "sigma parameters of a gaussian specifying the tuning width of the coarse-coded units, in normalized 0-1 range", Directives: gti.Directives{}, Tag: "def:\"0.2\" viewif:\"Code=GaussBump\""}},
		{"Clip", &gti.Field{Name: "Clip", Type: "bool", LocalType: "bool", Doc: "ensure that encoded and decoded value remains within specified range -- generally not useful with wrap", Directives: gti.Directives{}, Tag: ""}},
		{"WrapX", &gti.Field{Name: "WrapX", Type: "bool", LocalType: "bool", Doc: "x axis wraps around (e.g., for periodic values such as angle) -- encodes and decodes relative to both the min and max values", Directives: gti.Directives{}, Tag: ""}},
		{"WrapY", &gti.Field{Name: "WrapY", Type: "bool", LocalType: "bool", Doc: "y axis wraps around (e.g., for periodic values such as angle) -- encodes and decodes relative to both the min and max values", Directives: gti.Directives{}, Tag: ""}},
		{"Thr", &gti.Field{Name: "Thr", Type: "float32", LocalType: "float32", Doc: "threshold to cut off small activation contributions to overall average value (i.e., if unit's activation is below this threshold, it doesn't contribute to weighted average computation)", Directives: gti.Directives{}, Tag: "def:\"0.1\""}},
		{"MinSum", &gti.Field{Name: "MinSum", Type: "float32", LocalType: "float32", Doc: "minimum total activity of all the units representing a value: when computing weighted average value, this is used as a minimum for the sum that you divide by", Directives: gti.Directives{}, Tag: "def:\"0.2\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/emergent/v2/popcode.navg",
	ShortName:  "popcode.navg",
	IDName:     "navg",
	Doc:        "",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"avg", &gti.Field{Name: "avg", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"x", &gti.Field{Name: "x", Type: "int", LocalType: "int", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"y", &gti.Field{Name: "y", Type: "int", LocalType: "int", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/emergent/v2/popcode.Ring",
	ShortName:  "popcode.Ring",
	IDName:     "ring",
	Doc:        "Ring is a OneD popcode that encodes a circular value such as an angle\nthat wraps around at the ends.  It uses two internal vectors\nto render the wrapped-around values into, and then adds them into\nthe final result.  Unlike regular PopCodes, the Min and Max should\nrepresent the exact range of the value (e.g., 0 to 360 for angle)\nwith no extra on the ends, as that extra will wrap around to\nthe other side in this case.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"LowVec", &gti.Field{Name: "LowVec", Type: "[]float32", LocalType: "[]float32", Doc: "low-end encoding vector", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"HighVec", &gti.Field{Name: "HighVec", Type: "[]float32", LocalType: "[]float32", Doc: "high-end encoding vector", Directives: gti.Directives{}, Tag: "view:\"-\""}},
	}),
	Embeds: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"OneD", &gti.Field{Name: "OneD", Type: "github.com/emer/emergent/v2/popcode.OneD", LocalType: "OneD", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

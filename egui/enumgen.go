// Code generated by "goki generate ./... -add-types"; DO NOT EDIT.

package egui

import (
	"errors"
	"log"
	"strconv"
	"strings"

	"goki.dev/enums"
)

var _ToolGhostingValues = []ToolGhosting{0, 1, 2}

// ToolGhostingN is the highest valid value
// for type ToolGhosting, plus one.
const ToolGhostingN ToolGhosting = 3

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _ToolGhostingNoOp() {
	var x [1]struct{}
	_ = x[ActiveStopped-(0)]
	_ = x[ActiveRunning-(1)]
	_ = x[ActiveAlways-(2)]
}

var _ToolGhostingNameToValueMap = map[string]ToolGhosting{
	`ActiveStopped`: 0,
	`activestopped`: 0,
	`ActiveRunning`: 1,
	`activerunning`: 1,
	`ActiveAlways`:  2,
	`activealways`:  2,
}

var _ToolGhostingDescMap = map[ToolGhosting]string{
	0: ``,
	1: ``,
	2: ``,
}

var _ToolGhostingMap = map[ToolGhosting]string{
	0: `ActiveStopped`,
	1: `ActiveRunning`,
	2: `ActiveAlways`,
}

// String returns the string representation
// of this ToolGhosting value.
func (i ToolGhosting) String() string {
	if str, ok := _ToolGhostingMap[i]; ok {
		return str
	}
	return strconv.FormatInt(int64(i), 10)
}

// SetString sets the ToolGhosting value from its
// string representation, and returns an
// error if the string is invalid.
func (i *ToolGhosting) SetString(s string) error {
	if val, ok := _ToolGhostingNameToValueMap[s]; ok {
		*i = val
		return nil
	}
	if val, ok := _ToolGhostingNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " is not a valid value for type ToolGhosting")
}

// Int64 returns the ToolGhosting value as an int64.
func (i ToolGhosting) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the ToolGhosting value from an int64.
func (i *ToolGhosting) SetInt64(in int64) {
	*i = ToolGhosting(in)
}

// Desc returns the description of the ToolGhosting value.
func (i ToolGhosting) Desc() string {
	if str, ok := _ToolGhostingDescMap[i]; ok {
		return str
	}
	return i.String()
}

// ToolGhostingValues returns all possible values
// for the type ToolGhosting.
func ToolGhostingValues() []ToolGhosting {
	return _ToolGhostingValues
}

// Values returns all possible values
// for the type ToolGhosting.
func (i ToolGhosting) Values() []enums.Enum {
	res := make([]enums.Enum, len(_ToolGhostingValues))
	for i, d := range _ToolGhostingValues {
		res[i] = d
	}
	return res
}

// IsValid returns whether the value is a
// valid option for type ToolGhosting.
func (i ToolGhosting) IsValid() bool {
	_, ok := _ToolGhostingMap[i]
	return ok
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i ToolGhosting) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *ToolGhosting) UnmarshalText(text []byte) error {
	if err := i.SetString(string(text)); err != nil {
		log.Println(err)
	}
	return nil
}

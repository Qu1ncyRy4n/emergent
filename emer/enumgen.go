// Code generated by "core generate -add-types"; DO NOT EDIT.

package emer

import (
	"cogentcore.org/core/enums"
)

var _LayerTypeValues = []LayerType{0, 1, 2, 3}

// LayerTypeN is the highest valid value for type LayerType, plus one.
const LayerTypeN LayerType = 4

var _LayerTypeValueMap = map[string]LayerType{`Hidden`: 0, `Input`: 1, `Target`: 2, `Compare`: 3}

var _LayerTypeDescMap = map[LayerType]string{0: `Hidden is an internal representational layer that does not receive direct input / targets`, 1: `Input is a layer that receives direct external input in its Ext inputs`, 2: `Target is a layer that receives direct external target inputs used for driving plus-phase learning`, 3: `Compare is a layer that receives external comparison inputs, which drive statistics but do NOT drive activation or learning directly`}

var _LayerTypeMap = map[LayerType]string{0: `Hidden`, 1: `Input`, 2: `Target`, 3: `Compare`}

// String returns the string representation of this LayerType value.
func (i LayerType) String() string { return enums.String(i, _LayerTypeMap) }

// SetString sets the LayerType value from its string representation,
// and returns an error if the string is invalid.
func (i *LayerType) SetString(s string) error {
	return enums.SetString(i, s, _LayerTypeValueMap, "LayerType")
}

// Int64 returns the LayerType value as an int64.
func (i LayerType) Int64() int64 { return int64(i) }

// SetInt64 sets the LayerType value from an int64.
func (i *LayerType) SetInt64(in int64) { *i = LayerType(in) }

// Desc returns the description of the LayerType value.
func (i LayerType) Desc() string { return enums.Desc(i, _LayerTypeDescMap) }

// LayerTypeValues returns all possible values for the type LayerType.
func LayerTypeValues() []LayerType { return _LayerTypeValues }

// Values returns all possible values for the type LayerType.
func (i LayerType) Values() []enums.Enum { return enums.Values(_LayerTypeValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i LayerType) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *LayerType) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "LayerType")
}

var _PathTypeValues = []PathType{0, 1, 2, 3}

// PathTypeN is the highest valid value for type PathType, plus one.
const PathTypeN PathType = 4

var _PathTypeValueMap = map[string]PathType{`Forward`: 0, `Back`: 1, `Lateral`: 2, `Inhib`: 3}

var _PathTypeDescMap = map[PathType]string{0: `Forward is a feedforward, bottom-up pathway from sensory inputs to higher layers`, 1: `Back is a feedback, top-down pathway from higher layers back to lower layers`, 2: `Lateral is a lateral pathway within the same layer / area`, 3: `Inhib is an inhibitory pathway that drives inhibitory synaptic inputs instead of excitatory`}

var _PathTypeMap = map[PathType]string{0: `Forward`, 1: `Back`, 2: `Lateral`, 3: `Inhib`}

// String returns the string representation of this PathType value.
func (i PathType) String() string { return enums.String(i, _PathTypeMap) }

// SetString sets the PathType value from its string representation,
// and returns an error if the string is invalid.
func (i *PathType) SetString(s string) error {
	return enums.SetString(i, s, _PathTypeValueMap, "PathType")
}

// Int64 returns the PathType value as an int64.
func (i PathType) Int64() int64 { return int64(i) }

// SetInt64 sets the PathType value from an int64.
func (i *PathType) SetInt64(in int64) { *i = PathType(in) }

// Desc returns the description of the PathType value.
func (i PathType) Desc() string { return enums.Desc(i, _PathTypeDescMap) }

// PathTypeValues returns all possible values for the type PathType.
func PathTypeValues() []PathType { return _PathTypeValues }

// Values returns all possible values for the type PathType.
func (i PathType) Values() []enums.Enum { return enums.Values(_PathTypeValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i PathType) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *PathType) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "PathType") }

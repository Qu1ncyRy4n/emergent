// Code generated by "goki generate ./..."; DO NOT EDIT.

package esg

import (
	"goki.dev/gti"
	"goki.dev/ordmap"
)

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/emergent/v2/esg.Conds",
	ShortName:  "esg.Conds",
	IDName:     "conds",
	Doc:        "Conds are conditionals",
	Directives: gti.Directives{},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/emergent/v2/esg.Cond",
	ShortName:  "esg.Cond",
	IDName:     "cond",
	Doc:        "Cond is one element of a conditional",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"El", &gti.Field{Name: "El", Type: "github.com/emer/emergent/v2/esg.CondEls", LocalType: "CondEls", Doc: "what type of conditional element is this", Directives: gti.Directives{}, Tag: ""}},
		{"Rule", &gti.Field{Name: "Rule", Type: "string", LocalType: "string", Doc: "name of rule or token to evaluate for CRule", Directives: gti.Directives{}, Tag: ""}},
		{"Conds", &gti.Field{Name: "Conds", Type: "github.com/emer/emergent/v2/esg.Conds", LocalType: "Conds", Doc: "sub-conditions for SubCond", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/emergent/v2/esg.CondEls",
	ShortName: "esg.CondEls",
	IDName:    "cond-els",
	Doc:       "CondEls are different types of conditional elements",
	Directives: gti.Directives{
		&gti.Directive{Tool: "enums", Directive: "enum", Args: []string{}},
	},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/emergent/v2/esg.Item",
	ShortName: "esg.Item",
	IDName:    "item",
	Doc:       "Item is one item within a rule",
	Directives: gti.Directives{
		&gti.Directive{Tool: "git", Directive: "add", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Prob", &gti.Field{Name: "Prob", Type: "float32", LocalType: "float32", Doc: "probability for choosing this item -- 0 if uniform random", Directives: gti.Directives{}, Tag: ""}},
		{"Elems", &gti.Field{Name: "Elems", Type: "[]github.com/emer/emergent/v2/esg.Elem", LocalType: "[]Elem", Doc: "elements of the rule -- for non-Cond rules", Directives: gti.Directives{}, Tag: ""}},
		{"Cond", &gti.Field{Name: "Cond", Type: "github.com/emer/emergent/v2/esg.Conds", LocalType: "Conds", Doc: "conditions for this item -- specified by ?", Directives: gti.Directives{}, Tag: ""}},
		{"SubRule", &gti.Field{Name: "SubRule", Type: "*github.com/emer/emergent/v2/esg.Rule", LocalType: "*Rule", Doc: "for conditional, this is the sub-rule that is run with sub-items", Directives: gti.Directives{}, Tag: ""}},
		{"State", &gti.Field{Name: "State", Type: "github.com/emer/emergent/v2/esg.State", LocalType: "State", Doc: "state update name=value to set for rule", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/emergent/v2/esg.Elem",
	ShortName: "esg.Elem",
	IDName:    "elem",
	Doc:       "Elem is one elemenent in a concrete Item: either rule or token",
	Directives: gti.Directives{
		&gti.Directive{Tool: "git", Directive: "add", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"El", &gti.Field{Name: "El", Type: "github.com/emer/emergent/v2/esg.Elements", LocalType: "Elements", Doc: "type of element: Rule, Token, or SubItems", Directives: gti.Directives{}, Tag: ""}},
		{"Value", &gti.Field{Name: "Value", Type: "string", LocalType: "string", Doc: "value of the token: name of Rule or Token", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/emergent/v2/esg.Elements",
	ShortName: "esg.Elements",
	IDName:    "elements",
	Doc:       "Elements are different types of elements",
	Directives: gti.Directives{
		&gti.Directive{Tool: "enums", Directive: "enum", Args: []string{}},
	},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/emergent/v2/esg.State",
	ShortName:  "esg.State",
	IDName:     "state",
	Doc:        "State holds the name=value state settings associated with rule or item\nas a string, string map",
	Directives: gti.Directives{},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/emergent/v2/esg.RuleTypes",
	ShortName: "esg.RuleTypes",
	IDName:    "rule-types",
	Doc:       "RuleTypes are different types of rules (i.e., how the items are selected)",
	Directives: gti.Directives{
		&gti.Directive{Tool: "enums", Directive: "enum", Args: []string{}},
	},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/emergent/v2/esg.Rule",
	ShortName: "esg.Rule",
	IDName:    "rule",
	Doc:       "Rule is one rule containing some number of items",
	Directives: gti.Directives{
		&gti.Directive{Tool: "git", Directive: "add", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Name", &gti.Field{Name: "Name", Type: "string", LocalType: "string", Doc: "name of rule", Directives: gti.Directives{}, Tag: ""}},
		{"Desc", &gti.Field{Name: "Desc", Type: "string", LocalType: "string", Doc: "description / notes on rule", Directives: gti.Directives{}, Tag: ""}},
		{"Type", &gti.Field{Name: "Type", Type: "github.com/emer/emergent/v2/esg.RuleTypes", LocalType: "RuleTypes", Doc: "type of rule -- how to choose the items", Directives: gti.Directives{}, Tag: ""}},
		{"Items", &gti.Field{Name: "Items", Type: "[]*github.com/emer/emergent/v2/esg.Item", LocalType: "[]*Item", Doc: "items in rule", Directives: gti.Directives{}, Tag: ""}},
		{"State", &gti.Field{Name: "State", Type: "github.com/emer/emergent/v2/esg.State", LocalType: "State", Doc: "state update for rule", Directives: gti.Directives{}, Tag: ""}},
		{"PrevIdx", &gti.Field{Name: "PrevIdx", Type: "int", LocalType: "int", Doc: "previously selected item (from perspective of current rule)", Directives: gti.Directives{}, Tag: ""}},
		{"CurIdx", &gti.Field{Name: "CurIdx", Type: "int", LocalType: "int", Doc: "current index in Items (what will be used next)", Directives: gti.Directives{}, Tag: ""}},
		{"RepeatP", &gti.Field{Name: "RepeatP", Type: "float32", LocalType: "float32", Doc: "probability of repeating same item -- signaled by =%p", Directives: gti.Directives{}, Tag: ""}},
		{"Order", &gti.Field{Name: "Order", Type: "[]int", LocalType: "[]int", Doc: "permuted order if doing that", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/emergent/v2/esg.Rules",
	ShortName: "esg.Rules",
	IDName:    "rules",
	Doc:       "Rules is a collection of rules",
	Directives: gti.Directives{
		&gti.Directive{Tool: "git", Directive: "add", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Name", &gti.Field{Name: "Name", Type: "string", LocalType: "string", Doc: "name of this rule collection", Directives: gti.Directives{}, Tag: ""}},
		{"Desc", &gti.Field{Name: "Desc", Type: "string", LocalType: "string", Doc: "description of this rule collection", Directives: gti.Directives{}, Tag: ""}},
		{"Trace", &gti.Field{Name: "Trace", Type: "bool", LocalType: "bool", Doc: "if true, will print out a trace during generation", Directives: gti.Directives{}, Tag: ""}},
		{"Top", &gti.Field{Name: "Top", Type: "*github.com/emer/emergent/v2/esg.Rule", LocalType: "*Rule", Doc: "top-level rule -- this is where to start generating", Directives: gti.Directives{}, Tag: ""}},
		{"Map", &gti.Field{Name: "Map", Type: "map[string]*github.com/emer/emergent/v2/esg.Rule", LocalType: "map[string]*Rule", Doc: "map of each rule", Directives: gti.Directives{}, Tag: ""}},
		{"Fired", &gti.Field{Name: "Fired", Type: "map[string]bool", LocalType: "map[string]bool", Doc: "map of names of all the rules that have fired", Directives: gti.Directives{}, Tag: ""}},
		{"Output", &gti.Field{Name: "Output", Type: "[]string", LocalType: "[]string", Doc: "array of output strings -- appended as the rules generate output", Directives: gti.Directives{}, Tag: ""}},
		{"States", &gti.Field{Name: "States", Type: "github.com/emer/emergent/v2/esg.State", LocalType: "State", Doc: "user-defined state map optionally created during generation", Directives: gti.Directives{}, Tag: ""}},
		{"ParseErrs", &gti.Field{Name: "ParseErrs", Type: "[]error", LocalType: "[]error", Doc: "errors from parsing", Directives: gti.Directives{}, Tag: ""}},
		{"ParseLn", &gti.Field{Name: "ParseLn", Type: "int", LocalType: "int", Doc: "current line number during parsing", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})
